# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C8Oq30ZFJ-xexlvRi0Tzfgs8dot-wiVC
"""

from sklearn.neighbors import KNeighborsClassifier
import numpy as np

bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]
smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]
fish_length = bream_length + smelt_length
fish_weight = bream_weight + smelt_weight
fish_data = [[l,w] for l,w in zip(fish_length,fish_weight)]
fish_target = [1]*35 + [0]*14
# 하나의 생선 data : sample 이라고 부름

train_input = fish_data[:35]
train_target = fish_target[:35]
test_input = fish_data[35:]
test_target = fish_target[35:]

kn = KNeighborsClassifier()
kn = kn.fit(train_input, train_target)
kn.score(test_input, test_target)

input_arr = np.array(fish_data)
target_arr = np.array(fish_target)

# print(input_arr)
# sample 수, 특성 수
print(input_arr.shape)

# create random index - random.seed()를 지정하면 일정한 패턴의 랜덤값을 리턴
np.random.seed(42)
index = np.arange(49)
np.random.shuffle(index)

# print(index)
#numpy 는 array indexing 기능 제공. 인덱스로 2번째, 4번째에 있는 값들을 가져옴 
# print(input_arr[[1,3]])

train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]
test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]

import matplotlib.pyplot as plt
plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(test_input[:,0], test_input[:,1])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

kn = kn.fit(train_input, train_target)
kn.score(test_input,test_target)

print(test_target)
kn.predict(test_input)

np.column_stack((fish_length,fish_weight))
# np.ones(5) np.zeros()
fish_target = np.concatenate((np.ones(35),np.zeros(14)))

# 이 함수는 전달되는 리스트나 배열을 비율에 맞게 훈련 세트와 테스트 세트로 나누어준다.
from sklearn.model_selection import train_test_split
# random_state=42 일정한 랜덤값을 얻음.
train_input, test_input, train_target, test_target = train_test_split(fish_data,fish_target,random_state=42)
train_input = np.array(train_input)
test_input = np.array(test_input)
train_target = np.array(train_target)
test_target = np.array(test_target)
print(train_input.shape, test_input.shape)
print(train_target.shape, test_target.shape)
# 데이터가 일정하게 분포가 되어있지 않아 샘플링 편향이 일어나고 있다.
print(test_target)

# random_state는 랜덤값을 일정하게얻고 싶을때 값을 준다.
# stratify는 테스트 세트 비율을 일정하게 맞춰준다.(샘플링 편향 제거하기 위해)
train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, stratify=fish_target, random_state=42)
print(test_target)

kn = KNeighborsClassifier()
kn.fit(train_input,train_target)
print(kn.score(test_input, test_target))

kn.predict([[25,150]])

import matplotlib.pyplot as plt
train_input = np.array(train_input)
plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# k-최근접 이웃 알고리즘 
# kneighbors() : 주어진 샘플에서 가장 가까운 이웃들을 찾아줌.
distances, indexes = kn.kneighbors([[25,150]])
# 1을 선택해야는데 0을 선택하는 이유는.. 거리를 절대값으로 리턴해서 그렇다.
print(train_target[indexes])
# print(distances,indexes)
plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(25,150,marker='^')
plt.scatter(train_input[indexes,0],train_input[indexes,1],marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(25,150,marker='^')
plt.scatter(train_input[indexes,0],train_input[indexes,1],marker='D')
#x축도 y축과 거리를 똑같이 맞춤.
plt.xlim((0,1000))
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 이렇게 두 특성(길이와 무게)의 값이 놓인 범위가 다른 경우 scale이 다르다고 함.
# 이렇게 데이터를 표현하는 기준이 다를 때, 특성값을 일정한 기준으로 맞추는 작업을 데이터 전처리(data preprocessing)라고 함.
# 전처리 방법 : 표준점수(standard score) == z 점수 
# 각 특성값의 크기와 상관없이 동일한 조건으로 비교할 수 있음.
train_input = np.array(train_input)
mean = np.mean(train_input,axis=0)
std = np.std(train_input, axis=0)
print(mean, std)
# numpy 배열은 알아서 모든 행에 있는 평균값을 빼주고 나누어줌
train_scaled = (train_input - mean) / std
# print(train_scaled)

# 전처리 데이터로 모델 훈련
plt.scatter(train_scaled[:,0],train_scaled[:,1])
# 샘플을 전처리 해주지 않아서 그렇다.
plt.scatter(25,150,marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 샘플도 전처리를 해줘야함.
sample = ([25,150] - mean) / std
plt.scatter(train_scaled[:,0],train_scaled[:,1])
# 샘플을 전처리 해주지 않아서 그렇다.
plt.scatter(sample[0],sample[1],marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 모델을 평가
kn.fit(train_scaled,train_target)
test_scaled = (test_input - mean) / std
print(kn.score(test_scaled,test_target))

# 이제 1로 나온다. x,y 기준을 동일하게 맞추었으므로,
kn.predict([sample])

# x,y 기준을 동일하게 했더니 정확하게 평가한다.
distances, indexes = kn.kneighbors([sample])
plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(sample[0],sample[1], marker='^')
plt.scatter(train_scaled[indexes,0],train_scaled[indexes,1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()